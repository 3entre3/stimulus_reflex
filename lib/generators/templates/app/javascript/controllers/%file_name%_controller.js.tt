import ApplicationController from './application_controller'

/* This is the custom StimulusReflex controller for the <%= class_name %> reflex.
 * Learn more at: https://docs.stimulusreflex.com
 */
export default class extends ApplicationController {
  /*
   * Regular Stimulus lifecycle methods
   * Learn more at: https://stimulusjs.org/reference/lifecycle-callbacks
   *
   * If you intend to use this controller as a regular stimulus controller as well,
   * make sure any Stimulus lifecycle methods overridden in ApplicationController call super.
   *
   * Important:
   * By default, StimulusReflex overrides the -connect- method so make sure you
   * call super if you intend to do anything else when this controller connects.
  */

  // connect () {
  //   super.connect()
  //   // add your code here
  // }

  /* Reflex specific lifecycle methods.
   * For every method defined in your Reflex's ruby object, a set of lifecycle methods become available
   * in this javascript controller. These are optional so feel free to delete these stubs if you don't
   * need them.
   *
   * Important:
   * Make sure to add data-controller="<%= class_name %>" to your markup alongside
   * data-reflex="<%= class_name %>#example" for the lifecycle methods to fire properly.
   *
   * Example:
   *
   *   <a href="#" data-reflex="<%= class_name %>#example" data-controller="<%= class_name %>">Example</a>
   *
   * Arguments:
   *
   *   element - the element that triggered the reflex
   *             may be different than the Stimulus controller's this.element
   *
   *   reflex - the name of the reflex e.g. "<%= class_name %>#example"
   *
   *   error - error message from the server
   */

<% if actions.empty? -%>
  // Assuming you create a "<%= class_name %>#dance" action in your Reflex class
  // you'll be able to use the following lifecycle methods:

  // beforeDance(element, reflex) {
  //  element.innerText = 'Putting dance shoes on...'
  // }

  // danceSuccess(element, reflex) {
  //   element.innerText = 'Danced like no one was watching! Was someone watching?'
  // }

  // danceError(element, reflex, error) {
  //   console.error('danceError', error);
  //   element.innerText = "Couldn't dance!"
  // }
<% end -%>
<% actions.each do |action| -%>
  // <%= "before_#{action}".camelize(:lower) %>(element, reflex) {
  //  console.log("before <%= action %>", element, reflex)
  // }

  // <%= "#{action}_success".camelize(:lower) %>(element, reflex) {
  //   console.log("<%= action %> success", element, reflex)
  // }

  // <%= "#{action}_error".camelize(:lower) %>(element, reflex, error) {
  //   console.error("<%= action %> error", element, reflex, error)
  // }

  // <%= "after_#{action}".camelize(:lower) %>(element, reflex, error) {
  //   console.log("after <%= action %>", element, reflex, error)
  // }
<%= "\n" unless action == actions.last -%>
<% end -%>
}
